// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //done by myself bitches!!!!!!!!!!
    //condition for zx
    Not16(in=x, out=outx);
    Mux16(a=x, b=false, sel=zx, out=xin1);

    //condition for nx
    Not16(in=xin1, out=Nxin);
    Mux16(a=xin1, b=Nxin, sel=nx, out=xin2);

    //condition for zy
    Not16(in=y, out=outy);
    Mux16(a=y, b=false, sel=zy, out=yin1);

    //condition for ny
    Not16(in=yin1, out=Nyin);
    Mux16(a=yin1, b=Nyin, sel=ny, out=yin2);

    //select 0 hai to first input A liya jayega
    //condition for f
    Add16(a =xin2, b =yin2, out =xAddy);
    And16(a=xin2, b=yin2, out=xAndy);
    Mux16(a=xAndy, b=xAddy, sel=f, out=fun);

    //condition for no
    Not16(in=fun, out=Nfun);
    //we have to get two halves of outW inorder to use them to find zr and ng
    Mux16(a=fun, b=Nfun, sel=no, out=outW, out[15]=first, out[0..7]=first8, out[8..15]=second8);  
    //did these inorder to not affect our output and due to HDL syntax errors
    Or16(a=outW, b=false, out=out);


    //find zr
    Or8Way(in=first8, out=outfirst);
    Or8Way(in=second8, out=outsecond);
    Or(a=outfirst, b=outsecond, out=outor);
    Not(in=outor, out=zr);

    //find ng
    //these i dont understood required some external help
    //ahh now i get it simply checking the first bit if 1 then negative else positive
    And(a=first, b=true, out=ng);


}